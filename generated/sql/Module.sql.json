{
 "drop": "DROP TABLE IF EXISTS MODULE",
 "clear": "TRUNCATE TABLE IF EXISTS MODULE",
 "create": "CREATE TABLE IF NOT EXISTS MODULE(\n              module_id VARCHAR PRIMARY KEY DEFAULT (hex( randomblob(16))),\n              /*fk+cols*/ owner_group_id VARCHAR,\n/*fk+cols*/ injection_ref_name VARCHAR,\n/*fk+cols*/ npm_module VARCHAR,\n/*fk+cols*/ source VARCHAR\n              ,\n              FOREIGN KEY(owner_group_id) REFERENCES OWNER_GROUP(owner_group_id) \n            )",
 "insert": "INSERT INTO MODULE(\n            owner_group_id,injection_ref_name,npm_module,source\n            ) VALUES (@owner_group_id,@injection_ref_name,@npm_module,@source)",
 "updateSingle": "UPDATE MODULE SET\n            owner_group_id=@owner_group_id,\ninjection_ref_name=@injection_ref_name,\nnpm_module=@npm_module,\nsource=@source\n            WHERE module_id=@module_id",
 "deleteSingle": "DELETE FROM MODULE \n            WHERE module_id=@module_id",
 "getSingle": "SELECT T.rowid,T.* FROM MODULE T\n            WHERE T.module_id=@module_id",
 "getAll": "SELECT T.rowid,T.* FROM MODULE T",
 "getLast": "SELECT T.rowid,T.* FROM MODULE T HAVING T.rowid=MAX(T.rowid)",
 "getByRowid": "SELECT T.rowid,T.* FROM MODULE T WHERE T.rowid=@rowid",
 "countAll": "SELECT MAX(rowid) as last_id,COUNT(*) as records FROM MODULE",
 "selectBYowner_group_id": "SELECT T.rowid,T* FROM MODULE T \n          WHERE owner_group_id=@owner_group_id",
 "countBYowner_group_id": "SELECT MAX(rowid) as last_id,COUNT(*) as records FROM MODULE \n          WHERE owner_group_id=@owner_group_id"
}